<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BancoAlimentar.AlimentaEstaIdeia.Repository.Tests</name>
    </assembly>
    <members>
        <member name="T:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DataGenerator.TenantDataGenerator">
            <summary>
            Generate tenant data for the Repository tests.
            </summary>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DataGenerator.TenantDataGenerator.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests">
            <summary>
            This class defines unit tests for donation repository.
            </summary>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests.#ctor(BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.ServicesFixture)">
            <summary>
            Initializes a new instance of the <see cref="T:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests"/> class.
            </summary>
            <param name="servicesFixture">Service list.</param>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests.CanGetTotalDonations">
            <summary>
            Get total donation test.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests.CanClaimDonationToUser">
            <summary>
            Claim an existing donation to a user.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests.CanNotClaimDonationToUserWhenPublicIdIsNotGuid">
            <summary>
            Claiming an existing donation when the PublicID is not a Guid.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests.CanNotClaimDonationToUserWithEmptyPublicId">
            <summary>
            Claiming an existing donation when the PublicID is empty.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests.CanGetDonationFromPublicId">
            <summary>
            Get donation from public Id.
            </summary>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests.CanGetDonationFromTransactionKey">
            <summary>
            Get donation from the Easypay transaction key.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests.CanUpdateCreditCardPayment">
            <summary>
            Update credit card payment flow.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests.CanUpdateDonationPaymentId">
            <summary>
            Update payment status.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests.CanUpdateDonationPaymentIdWhenDonationHasNoPayments">
            <summary>
            Update payment when the donation has no payments.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests.CanNotUpdateDonationPaymentIdWhenDonationIsNull">
            <summary>
            Donation is not updated when donation is null.
            </summary>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests.CanUpdateMultiBankPayment">
            <summary>
            Updated multibanco payment.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests.CanNotCanUpdateMultiBankPaymentWhenDonationIsNull">
            <summary>
            Update multibanco payment.
            </summary>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests.CanUpdateMultiBankPaymentWhenDonationHasNoPayments">
            <summary>
            Update multibanco payment when donation has no payments.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests.CanUpdatePaymentTransactionToPayed">
            <summary>
            Update payment transaction to payed.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous unit test.</returns>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests.CanUpdatePaymentTransactionToErrorPayment">
            <summary>
            Update payment transaction to error payment.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests.CanNotUpdatePaymentTransactionWhenTransactionKeyIsInvalid">
            <summary>
            Update transaction when transaction key is null is empy.
            </summary>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests.CanCompleteMultiBankPayment">
            <summary>
            Multibanco payment is completed.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests.CanNotCompleteMultiBankPaymentWithInValidTransactionKey">
            <summary>
            Can't update multibanco payment when trasaction key is invalid.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests.CanCreateMBWayPayment">
            <summary>
            Create a new MBWay payment.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests.CanNotCreateMBWayPaymentWhenDonationIsNull">
            <summary>
            Can not create MBWay payment when the donation is null.
            </summary>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests.CanCreateCreditCardPayment">
            <summary>
            Create credit card payment.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests.CanNotCreateCreditCardPaymentWhenDonationIsNull">
            <summary>
            Can not create credit card payment when the donation id is null.
            </summary>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests.CanCompleteCreditCardPayment">
            <summary>
            Complete credit card payment.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests.CanNotCompleteCreditCardPaymentWithWrongTransactionKey">
            <summary>
            Can not complete credit card payment with wrong transaction key.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests.CanNotCompleteCreditCardPaymentWithMisMatchedTransactionKey">
            <summary>
            Can not complete credit card payment with wrong transaction key.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests.CanCompleteMBWayPayment">
            <summary>
            Complete MBway payment.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests.CanNotCompleteMBWayPaymentWithWrongTransactionKey">
            <summary>
            Can not complete MBWay payment with wrong transaction key.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests.CanNotCompleteMBWayPaymentWithMisMatchedTransactionKey">
            <summary>
            Can not complete MBWay payment with mismatched transaction key.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests.CanGetCurrentMultiBankPayment">
            <summary>
            Gets multibanco payments.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests.CanNotGetCurrentMultiBankPaymentForWrongDonationId">
            <summary>
            Can not get current multibanco payment with wrong donation id.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests.CanGetFullDonationById">
            <summary>
            Get full donation by id.
            </summary>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests.CanGetPaymentsForDonation">
            <summary>
            Get payments for a particular donation.
            </summary>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests.CanGetUserDonation">
            <summary>
            Get user donations.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous unit test.</returns>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests.CanGetPaymentType">
            <summary>
            Check payment types.
            </summary>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.DonationRepositoryTests.EasyPayTest">
            <summary>
            Tests the easypay API.
            </summary>
            <returns>A task.</returns>
        </member>
        <member name="T:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.InvoiceRepositoryTests">
            <summary>
            Invoice repository tests.
            </summary>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.InvoiceRepositoryTests.#ctor(BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.ServicesFixture)">
            <summary>
            Initializes a new instance of the <see cref="T:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.InvoiceRepositoryTests"/> class.
            </summary>
            <param name="servicesFixture">Service list.</param>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.InvoiceRepositoryTests.CanFindInvoiceByPublicId(BancoAlimentar.AlimentaEstaIdeia.Sas.Model.Tenant)">
            <summary>
            Find invoice by public ID.
            </summary>
            <param name="tenant">Tenant.</param>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.InvoiceRepositoryTests.CanNotFindInvoiceByPublicIdWithEmptyPublicId(BancoAlimentar.AlimentaEstaIdeia.Sas.Model.Tenant)">
            <summary>
            Can not find invoice with empty public id.
            </summary>
            <param name="tenant">Tenant.</param>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.InvoiceRepositoryTests.CanNotFindInvoiceByPublicIdWithWrongPublicId(BancoAlimentar.AlimentaEstaIdeia.Sas.Model.Tenant)">
            <summary>
            Can not find invoice with wrong public id.
            </summary>
            <param name="tenant">Tenant.</param>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.InvoiceRepositoryTests.CanNotFindInvoiceByPublicIdWhenPublicIdIsNotGuid(BancoAlimentar.AlimentaEstaIdeia.Sas.Model.Tenant)">
            <summary>
            Can not find invoice by public id when public id is not a valid <see cref="T:System.Guid"/>.
            </summary>
            <param name="tenant">Tenant.</param>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.InvoiceRepositoryTests.CanFindInvoiceByDonation(BancoAlimentar.AlimentaEstaIdeia.Sas.Model.Tenant)">
            <summary>
            Find invoice by donation.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous operation.</returns>
            <param name="tenant">Tenant.</param>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.InvoiceRepositoryTests.CanNotFindInvoiceByDonationWithWrongDonationId(BancoAlimentar.AlimentaEstaIdeia.Sas.Model.Tenant)">
            <summary>
            Can not find invoice by donation with wrong donation id.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous operation.</returns>
            <param name="tenant">Tenant.</param>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.InvoiceRepositoryTests.CanNotFindInvoiceByDonationWithWrongUserDetails(BancoAlimentar.AlimentaEstaIdeia.Sas.Model.Tenant)">
            <summary>
            Can not find invoice by donation with wrong user details.
            </summary>
            <param name="tenant">Tenant.</param>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.InvoiceRepositoryTests.CanNotFindInvoiceByDonationWhenPaymentStatusIsNotPayed(BancoAlimentar.AlimentaEstaIdeia.Sas.Model.Tenant)">
            <summary>
            Can not find invoice by donation when payment status is not a valid payed.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous operation.</returns>
            <param name="tenant">Tenant.</param>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.InvoiceRepositoryTests.CanNotFindInvoiceByDonationWhenConfirmPaymentStatusIsNotOk(BancoAlimentar.AlimentaEstaIdeia.Sas.Model.Tenant)">
            <summary>
            Can not find invoice by donation whe payment is status is not ok.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous operation.</returns>
            <param name="tenant">Tenant.</param>
        </member>
        <member name="T:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.NifApiValidatorTests">
            <summary>
            This class defines unit tests for NifApiValidator.
            </summary>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.NifApiValidatorTests.#ctor(BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.ServicesFixture)">
            <summary>
            Initializes a new instance of the <see cref="T:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.NifApiValidatorTests"/> class.
            </summary>
            <param name="servicesFixture">Service list.</param>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.NifApiValidatorTests.TestNullNIF">
            <summary>
            Test if NifApivalidator returns null if null is passed.
            </summary>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.NifApiValidatorTests.TestValidNIFs">
            <summary>
            Test if NifApivalidator returns true with a valid NIFs.
            </summary>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.NifApiValidatorTests.TestValidInternationalNIF">
            <summary>
            Test if NifApivalidator returns true with a valid International NIFs.
            </summary>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.NifApiValidatorTests.TestInValidNIFs">
            <summary>
            Test if NifApivalidator returns false with a INvalid NIFs.
            </summary>
        </member>
        <member name="T:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.ServicesFixture">
            <summary>
            This class defines shared services class fixture for unit tests.
            </summary>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.ServicesFixture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.ServicesFixture"/> class.
            </summary>
        </member>
        <member name="P:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.ServicesFixture.Configuration">
            <summary>
            Gets or sets the configuration system.
            </summary>
        </member>
        <member name="P:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.ServicesFixture.ServiceProvider">
            <summary>
            Gets the Service provider.
            </summary>
        </member>
        <member name="P:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.ServicesFixture.UserManager">
            <summary>
            Gets the user manager.
            </summary>
        </member>
        <member name="P:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.ServicesFixture.DonationId">
            <summary>
            Gets the Donation id.
            </summary>
        </member>
        <member name="P:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.ServicesFixture.UserId">
            <summary>
            Gets the User id.
            </summary>
        </member>
        <member name="P:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.ServicesFixture.PublicId">
            <summary>
            Gets the donation public id.
            </summary>
        </member>
        <member name="P:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.ServicesFixture.Nif">
            <summary>
            Gets the User Nif.
            </summary>
        </member>
        <member name="P:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.ServicesFixture.TransactionKey">
            <summary>
            Gets or sets the easypay transaction key.
            </summary>
        </member>
        <member name="M:BancoAlimentar.AlimentaEstaIdeia.Repository.Tests.ServicesFixture.CreateTestDonation(BancoAlimentar.AlimentaEstaIdeia.Model.ApplicationDbContext)">
            <summary>
            This method creates a test donation and its related dependencies which is being used in several tests.
            </summary>
            <param name="context">Application Db context.</param>
            <returns>Returns async task.</returns>
        </member>
    </members>
</doc>
